syntax = "proto3";

package ssh;

// Rust Agent 注册到 Manager
message AgentHello {
  string agent_id = 1;
  string hostname = 2;
}

// Manager 命令 Agent 去连接目标主机
message SshInit {
  string session_id = 1;
  string target_host = 2;
  uint32 target_port = 3;
  string username = 4;

  oneof auth {
    PasswordAuth password = 5;
    KeyAuth key = 6;
  }
}

message PasswordAuth {
  string password = 1;
}

message KeyAuth {
  string pubkey_path = 1;
  string privkey_path = 2;
  string passphrase = 3;
}

// 用于传输输入/输出流
message SshData {
  string session_id = 1;
  bytes data = 2;
  bool is_stdin = 3;
}

// 通知会话关闭或异常
message SshClose {
  string session_id = 1;
  string reason = 2;
}

// 确认消息，用于反馈连接/命令是否成功
message SshAck {
  string session_id = 1;
  bool success = 2;
  string message = 3; // 错误原因或提示
}

// 用于心跳检测
message AgentPing {
  int64 timestamp = 1;
}

message AgentPong {
  int64 timestamp = 1;
}

// 用于终端窗口大小变化
message PtyResize {
  string session_id = 1;
  uint32 cols = 2;
  uint32 rows = 3;
}

// 包裹所有消息
message SshStreamMessage {
  oneof payload {
    AgentHello hello = 1;
    SshInit init = 2;
    SshData data = 3;
    SshClose close = 4;
    SshAck ack = 5;
    AgentPing ping = 6;
    AgentPong pong = 7;
    PtyResize resize = 8;
  }
}

service SshService {
  // 双向流：Agent<->Manager
  rpc StartStream(stream SshStreamMessage) returns (stream SshStreamMessage);
}